send_tip = news_manager.send_tip
gc = game.translate_string
rand = math.random
print_dbg = arti_lootboxes.print_dbg

pickset_cond = {}
-- class
function bind(obj)
    obj:bind_object(pickset_binder(obj))
end

class "pickset_binder" (object_binder)

function pickset_binder:__init(obj) super(obj)
	self.first_update = nil
end

function pickset_binder:update(delta)
    local obj  = self.object
    local id = obj:id()
    if not self.first_update then
        self.first_update = true
        if pickset_cond[id] then
            -- legacy eval - if decimal value, set to new num of picks
            if pickset_cond[id] < 1 then
                print_dbg("Legacy converstion detected - converting to equivalent amount of new picks")
                pickset_cond[id] = math.floor(math.ceil(pickset_cond[id] * 100) / 5)
            end
        else
            -- start em with 5, also reduce the price accordingly
            pickset_cond[id] = 4
        end
    end
    -- default to empty
    if not pickset_cond[id] then
        pickset_cond[id] = 0
    end
    obj:set_condition(pickset_cond[id]/20)
end

function pickset_binder:reload(section)
    object_binder.reload(self, section)
end

function pickset_binder:reinit()
    object_binder.reinit(self)
end

function pickset_binder:net_spawn(se_abstract)
    if not(object_binder.net_spawn(self, se_abstract)) then
        return false
    end
    return true
end

function pickset_binder:net_destroy()
	object_binder.net_destroy(self)
end

function pickset_binder:save(stpk)
end

function pickset_binder:load(stpk)
end

local function save_state(mdata) 
	mdata.pickset_cond = pickset_cond
end

local function load_state(mdata) 
	pickset_cond = mdata.pickset_cond or {}
end

local function se_device_on_unregister(se_obj, typ)
	--local sec = se_obj:section_name()
	--if ini_sys:r_string_ex(sec,"script_binding") == "item_device.bind" then
		local id = se_obj.id
		pickset_cond[id] = nil
	--end
end

function modify(id, amt)
    pickset_cond[id] = clamp(pickset_cond[id] + amt, 0, 20)
end

function get_power(id)
    return pickset_cond[id]
end


function try_bundle(obj)
    local num_picks = 0
    local function search(temp, item)
        local item_section = item:section()
        if item_section == "lockpick" then
            num_picks = num_picks + 1
        end
    end
    db.actor:iterate_inventory(search, nil)
    if (num_picks > 4) then 
        return gc("st_pick_bundle")
    end
end

function bundle_picks(obj)
    
    local pick_ids = {}
    local function search(temp, item)
        local item_section = item:section()
        if item_section == "lockpick" then
            pick_ids[#pick_ids + 1] = item:id()
        end
    end
    
    db.actor:iterate_inventory(search, nil)
    if (#pick_ids > 4) then
        for i=1,5 do
            alife_release_id(pick_ids[i])
        end
        alife_create_item("bundle_lockpick", db.actor)
    end
end

function menu_empty(obj)
    return gc("st_empty_pickset")
end

function empty(obj)
    local id = obj:id()
    local amt = pickset_cond[id]
    if amt > 0 then
        local bundle_to_spawn = math.floor(amt/5)
        local pick_to_spawn = math.fmod(amt, 5)
        pickset_cond[id] = 0
        for i=1,bundle_to_spawn do
            alife_create_item("bundle_lockpick", db.actor)
        end
        for i=1,pick_to_spawn do
            alife_create_item("lockpick", db.actor)
        end
    end
end

function try_split(obj)
    return gc("st_pick_split")
end

function split_picks(obj)
    alife_release_id(obj:id())
    give_object_to_actor("lockpick",5)
end

function try_pick(obj)
    local found_set = false
    function search(temp, item)
        local item_section = item:section()
        if item_section == "lockpick_set" then
            found_set = true
        end
    end
    db.actor:iterate_inventory(search, nil)
    if found_set then
        return gc("st_try_pick")
    end
end

function pick_box(obj)
    local found_id = 0
    local found_amt = 0
    function search(temp, item)
        print_dbg("checking %s", item:section())
        local item_id = item:id()
        if pickset_cond[item_id] then
            if pickset_cond[item_id] > found_amt then
                print_dbg("Updating found amount")
                found_amt = pickset_cond[item_id]
                found_id = item_id
            end
        end
    end
    db.actor:iterate_inventory(search, nil)
    print_dbg("Best id so far is %s", found_id)
    on_item_drag_dropped(get_object_by_id(found_id), obj, EDDListType.iActorBag, EDDListType.iActorBag)

end

-- to display condition on lockpick set
BuildHeader = ui_item.build_desc_header  -- obj needed
function ui_item.build_desc_header(obj, sec, str)
	str = str or gc(ini_sys:r_string_ex(sec,"description"))
	if (not str) then return "" end
	
	local _str = ""
    if "lockpick_set" == sec then
        print_dbg("building condition for lockpick set")
        local con = pickset_cond[obj:id()] * 5
        local clr = utils_xml.get_color_con(con)
        _str = clr .. " " .. gc("st_dot").. " " .. utils_xml.get_color("ui_gray_1") .. gc("st_condition") .. ": " .. clr .. tostring(con)  .. "%" .. "\\n \\n" .. utils_xml.get_color("ui_gray_1")   
        return _str .. str
    else
        return BuildHeader(obj, sec, str)
    end
end

function on_item_drag_dropped(from, to, from_slot, to_slot)

    if not ((from_slot == EDDListType.iDeadBodyBag and to_slot == EDDListType.iDeadBodyBag) or (from_slot == EDDListType.iActorBag  and (to_slot == EDDListType.iActorBag or to_slot == EDDListType.iActorSlot))) then
        return
    end
    local from_sec = from:section()
    local to_sec = to:section()

    local replace_amt = SYS_GetParam(2,from_sec,"replacement")
    local max_picks = SYS_GetParam(2,to_sec,"max_picks")
    if replace_amt and SYS_GetParam(0, to_sec, "script_binding") == "pickset_binder.bind" and pickset_cond[to:id()] < max_picks then
        modify(to:id(), replace_amt)
        alife_release(from)
        send_tip(db.actor, gc("st_restore_pick"), nil, "swiss_knife", 6000)
    end
end


function on_game_start()
	if (USE_MARSHAL) then 
		RegisterScriptCallback("save_state",save_state)
		RegisterScriptCallback("load_state",load_state)
	end
    RegisterScriptCallback("ActorMenu_on_item_drag_drop",on_item_drag_dropped)
	RegisterScriptCallback("server_entity_on_unregister",se_device_on_unregister)
end
